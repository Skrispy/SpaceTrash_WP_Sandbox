(()=>{var e={685:e=>{e.exports=function(e){function n(e){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",e)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(e):"undefined"!=typeof eval?eval.call(null,e):n("EvalError: No eval function available")}catch(e){n(e)}}},535:e=>{e.exports='const readFileSync = require("fs");\n\n// Using ES6 imports\n\nvar cat = "../data/catalog.txt";\nconst datArr = readFileSync(cat).toString().split(/\\n/);\nconst newDatArr = [];\n//Make array of tles\nfor (let i = 0; i < datArr.length; i += 3) {\n  if (datArr[i].includes("DEB") || datArr[i].includes("R/B")) {\n    newDatArr.push(datArr[i] + "\\n" + datArr[i + 1] + "\\n" + datArr[i + 2]);\n  }\n}\n//FUNCTION CALL\nconst viewer = new Cesium.Viewer("cesiumContainer", {\n  imageryProvider: new Cesium.TileMapServiceImageryProvider({\n    url: Cesium.buildModuleUrl("Assets/Textures/NaturalEarthII"),\n  }),\n  baseLayerPicker: false,\n  geocoder: false,\n  homeButton: false,\n  infoBox: false,\n  navigationHelpButton: false,\n  sceneModePicker: false,\n});\n\nfor (const x of newDatArr) {\n  putJunkOnScreen(x);\n}\n\nfunction putJunkOnScreen(tle) {\n  const ISS_TLE = tle;\n\n  const satrec = satellite.twoline2satrec(\n    ISS_TLE.split("\\n")[1].trim(),\n    ISS_TLE.split("\\n")[2].trim()\n  );\n  // Give SatelliteJS the TLE\'s and a specific time.\n  // Get back a longitude, latitude, height (km).\n  // We\'re going to generate a position every 10 seconds from now until 6 seconds from now.\n  const totalSeconds = 60 * 60 * 6;\n  const timestepInSeconds = 10;\n  const start = Cesium.JulianDate.fromDate(new Date());\n  const stop = Cesium.JulianDate.addSeconds(\n    start,\n    totalSeconds,\n    new Cesium.JulianDate()\n  );\n  viewer.clock.startTime = start.clone();\n  viewer.clock.stopTime = stop.clone();\n  viewer.clock.currentTime = start.clone();\n  viewer.timeline.zoomTo(start, stop);\n  viewer.clock.multiplier = 40;\n  viewer.clock.clockRange = Cesium.ClockRange.LOOP_STOP;\n\n  const positionsOverTime = new Cesium.SampledPositionProperty();\n  for (let i = 0; i < totalSeconds; i += timestepInSeconds) {\n    const time = Cesium.JulianDate.addSeconds(\n      start,\n      i,\n      new Cesium.JulianDate()\n    );\n    const jsDate = Cesium.JulianDate.toDate(time);\n\n    const positionAndVelocity = satellite.propagate(satrec, jsDate);\n    const gmst = satellite.gstime(jsDate);\n    const p = satellite.eciToGeodetic(positionAndVelocity.position, gmst);\n\n    const position = Cesium.Cartesian3.fromRadians(\n      p.longitude,\n      p.latitude,\n      p.height * 1000\n    );\n    positionsOverTime.addSample(time, position);\n  }\n}\n\n// Visualize the satellite with a red dot.\n\nconst satellitePoint = viewer.entities.add({\n  position: positionsOverTime,\n  point: { pixelSize: 5, color: Cesium.Color.RED },\n});\n\n// Set the camera to follow the satellite\nviewer.trackedEntity = satellitePoint;\n\n// Wait for globe to load then zoom out\n\nlet initialized = false;\nviewer.scene.globe.tileLoadProgressEvent.addEventListener(() => {\n  if (!initialized && viewer.scene.globe.tilesLoaded === true) {\n    viewer.clock.shouldAnimate = true;\n    initialized = true;\n    viewer.scene.camera.zoomOut(7000000);\n    document.querySelector("#loading").classList.toggle("disappear", true);\n  }\n});\n'}},n={};function t(i){var o=n[i];if(void 0!==o)return o.exports;var s=n[i]={exports:{}};return e[i](s,s.exports,t),s.exports}t(685)(t(535))})();